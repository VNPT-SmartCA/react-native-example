// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 effective-4.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name eContractSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Foundation
import ICSdkEKYC
import JWTDecode
import NVActivityIndicatorView
import ObjectMapper
import PDFKit
import Photos
import RxAlamofire
import RxCocoa
import RxSwift
import SignaturePad
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_exported import eContractSDK
public class HopDongChoKy : ObjectMapper.Mappable {
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class HopDongDichVu : ObjectMapper.Mappable {
  public init()
  public init(_ stt: Swift.String, _ loaiDVID: Swift.String, _ loaiDV: Swift.String, _ diaChiTB: Swift.String, _ soThueBao: Swift.String, _ soSim: Swift.String, _ goiCuoc: Swift.String, _ dVCongThem: Swift.String, _ doiTuongTB: Swift.String, _ hinhThuc: Swift.String, _ thongTinKhac: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SelectorTextField : eContractSDK.ACFloatingTextfield {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
extension eContractSDK.SelectorTextField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ThongTinHopDongViewController : eContractSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension eContractSDK.ThongTinHopDongViewController : Foundation.URLSessionDownloadDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
public protocol eContractDelegate {
  func onSuccess(contractId: Swift.String, signId: Swift.String, signerId: Swift.String, validDate: Swift.String?)
  func onError(msg: Swift.String)
}
public class eContract {
  public var delegate: eContractSDK.eContractDelegate?
  public var data: eContractSDK.SdkInput
  public init()
  public func start(fromController: UIKit.UIViewController)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable @objc @_Concurrency.MainActor(unsafe) open class ACFloatingTextfield : UIKit.UITextField {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isCustomize: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var disableFloatingLabel: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shakeLineWithError: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeHolderColor_ACFloatTextField: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedplaceHolderColor_ACFloatTextField: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var errorTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var errorLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var errorText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showError()
  @_Concurrency.MainActor(unsafe) public func hideError()
  @_Concurrency.MainActor(unsafe) public func showErrorWithText(errorText: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ISRadioButton : UIKit.UIButton {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconSize: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var indicatorSize: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconStrokeWidth: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var indicatorColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var marginWidth: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconOnRight: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconSquare: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImage!
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var iconSelected: UIKit.UIImage!
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var multipleSelectionEnabled: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var setIcon: UIKit.UIImage {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var setIconSelected: UIKit.UIImage {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) public var setMultipleSelectionEnabled: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) public func selectedButton() -> eContractSDK.ISRadioButton!
  @_Concurrency.MainActor(unsafe) public func selectedButtons() -> Foundation.NSMutableArray
  @_Concurrency.MainActor(unsafe) public func deselectOtherButtons()
  @_Concurrency.MainActor(unsafe) public func unSelectedButtons() -> Foundation.NSArray
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func titleColor(for state: UIKit.UIControl.State) -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum DeviceSpecific {
  case iPhone
  case iPhoneRetina
  case iPhone5
  case iPhone6
  case iPhone6Plus
  case iPhoneX
  case iPhoneXR
  case iPhoneXSMax
  case iPad
  case iPadRetina
  case Unknown
  public static func == (a: eContractSDK.DeviceSpecific, b: eContractSDK.DeviceSpecific) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIImage {
  public class func imageForSpecificDevice(imageName: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
public enum UIColorInputError : Swift.Error {
  case missingHashMarkAsPrefix, unableToScanHexValue, mismatchedHexStringLength
  public static func == (a: eContractSDK.UIColorInputError, b: eContractSDK.UIColorInputError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(hex3: Swift.UInt16, alpha: CoreFoundation.CGFloat = 1)
  convenience public init(hex4: Swift.UInt16)
  convenience public init(hex6: Swift.UInt32, alpha: CoreFoundation.CGFloat = 1)
  convenience public init(hex8: Swift.UInt32)
  convenience public init(rgba_throws rgba: Swift.String) throws
  convenience public init(_ rgba: Swift.String, defaultColor: UIKit.UIColor = UIColor.clear)
  public func hexString(_ includeAlpha: Swift.Bool = true) -> Swift.String
}
extension Swift.String {
  public func argb2rgba() -> Swift.String?
}
public class ThongTinHopDong : ObjectMapper.Mappable {
  public init()
  public init(_ soHD: Swift.String, _ maKH: Swift.String, _ tenKH: Swift.String, _ ngaySinh: Swift.String, _ gioiTinh: Swift.String, _ quocTich: Swift.String, _ soGT: Swift.String, _ ngayCapGT: Swift.String, _ noiCapGT: Swift.String, _ diaChiKH: Swift.String, _ diaChiTo: Swift.String, _ diaChiPhuong: Swift.String, _ diaChiQuan: Swift.String, _ tinhThanh: Swift.String, _ soDienThoai: Swift.String, _ email: Swift.String, _ thongTinLienHe: Swift.String, _ soVisa: Swift.String, _ soGiayPhepKinhDoanh: Swift.String, _ ngayCapGPKD: Swift.String, _ noiCapGPKD: Swift.String, _ diaChiThanhToan: Swift.String, _ diaChiChungTu: Swift.String, _ STK: Swift.String, _ nganHang: Swift.String, _ MST: Swift.String, _ hinhThucThanhToan: Swift.String, _ hinhThucTBCuoc: Swift.String, _ amId: Swift.String, _ dsDichVu: [eContractSDK.HopDongDichVu], _ loaiGTId: Swift.String, _ htttId: Swift.String = "", _ httbId: Swift.String = "", _ maGiaoDich: Swift.String = "")
  required public init?(map: ObjectMapper.Map)
  public func dataDemo(soDienThoai: Swift.String, email: Swift.String, soChungThu: Swift.String)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
public class SdkInput : ObjectMapper.Mappable {
  public var orderId: Swift.String
  public var input: eContractSDK.ThongTinHopDong
  public var tinhId: Swift.String
  public var tokenId: Swift.String
  public var tokenKey: Swift.String
  public var accessToken: Swift.String
  public var domain: Swift.String
  public var maHRM: Swift.String
  public var log: eContractSDK.Log
  public init()
  public func dataDemo(orderId: Swift.String, soDienThoai: Swift.String, email: Swift.String, soChungThu: Swift.String)
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension eContractSDK.BaseViewController : NVActivityIndicatorView.NVActivityIndicatorViewable {
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
}
public class Log : ObjectMapper.Mappable {
  public var versionSDK: Swift.String
  public var versionAPP: Swift.String
  public var osAPP: Swift.String
  public init()
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
extension eContractSDK.DeviceSpecific : Swift.Equatable {}
extension eContractSDK.DeviceSpecific : Swift.Hashable {}
extension eContractSDK.UIColorInputError : Swift.Equatable {}
extension eContractSDK.UIColorInputError : Swift.Hashable {}
