// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 effective-4.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name Result
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Result
import Swift
import _Concurrency
import _StringProcessing
public struct AnyError : Swift.Error {
  public let error: Swift.Error
  public init(_ error: Swift.Error)
}
extension Result.AnyError : Result.ErrorConvertible {
  public static func error(from error: Swift.Error) -> Result.AnyError
}
extension Result.AnyError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Result.AnyError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var helpAnchor: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public enum NoError : Swift.Error, Swift.Equatable {
  public static func == (lhs: Result.NoError, rhs: Result.NoError) -> Swift.Bool
}
public enum Result<Value, Error> : Result.ResultProtocol, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible where Error : Swift.Error {
  case success(Value)
  case failure(Error)
  public typealias Success = Value
  public typealias Failure = Error
  public init(value: Value)
  public init(error: Error)
  public init(_ value: Value?, failWith: @autoclosure () -> Error)
  public init(_ f: @autoclosure () throws -> Value)
  @available(*, deprecated, renamed: "init(catching:)")
  public init(attempt f: () throws -> Value)
  public init(catching body: () throws -> Result.Result<Value, Error>.Success)
  @available(*, deprecated, renamed: "get()")
  public func dematerialize() throws -> Value
  public func get() throws -> Result.Result<Value, Error>.Success
  public func analysis<Result>(ifSuccess: (Value) -> Result, ifFailure: (Error) -> Result) -> Result
  public static var errorDomain: Swift.String {
    get
  }
  public static var functionKey: Swift.String {
    get
  }
  public static var fileKey: Swift.String {
    get
  }
  public static var lineKey: Swift.String {
    get
  }
  public static func error(_ message: Swift.String? = nil, function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line) -> Foundation.NSError
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var result: Result.Result<Value, Error> {
    get
  }
}
extension Result.Result where Error == Result.AnyError {
  public init(_ f: @autoclosure () throws -> Value)
  public init(attempt f: () throws -> Value)
}
@available(*, deprecated, renamed: "Result.init(attempt:)")
public func materialize<T>(_ f: () throws -> T) -> Result.Result<T, Result.AnyError>
@available(*, deprecated, renamed: "Result.init(_:)")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> Result.Result<T, Result.AnyError>
extension Foundation.NSError : Result.ErrorConvertible {
  public static func error(from error: Swift.Error) -> Self
}
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: () throws -> T) -> Result.Result<T, Foundation.NSError>
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> Result.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`<T>(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> T?) -> Result.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> Swift.Bool) -> Result.Result<(), Foundation.NSError>
public protocol ResultProtocol {
  associatedtype Value
  associatedtype Error : Swift.Error
  init(value: Self.Value)
  init(error: Self.Error)
  var result: Result.Result<Self.Value, Self.Error> { get }
}
extension Result.Result {
  public var value: Value? {
    get
  }
  public var error: Error? {
    get
  }
  public func map<U>(_ transform: (Value) -> U) -> Result.Result<U, Error>
  public func flatMap<U>(_ transform: (Value) -> Result.Result<U, Error>) -> Result.Result<U, Error>
  public func fanout<U>(_ other: @autoclosure () -> Result.Result<U, Error>) -> Result.Result<(Value, U), Error>
  public func mapError<Error2>(_ transform: (Error) -> Error2) -> Result.Result<Value, Error2> where Error2 : Swift.Error
  public func flatMapError<Error2>(_ transform: (Error) -> Result.Result<Value, Error2>) -> Result.Result<Value, Error2> where Error2 : Swift.Error
  public func bimap<U, Error2>(success: (Value) -> U, failure: (Error) -> Error2) -> Result.Result<U, Error2> where Error2 : Swift.Error
}
extension Result.Result {
  public func recover(_ value: @autoclosure () -> Value) -> Value
  public func recover(with result: @autoclosure () -> Result.Result<Value, Error>) -> Result.Result<Value, Error>
}
public protocol ErrorConvertible : Swift.Error {
  static func error(from error: Swift.Error) -> Self
}
extension Result.Result where Error : Result.ErrorConvertible {
  public func tryMap<U>(_ transform: (Value) throws -> U) -> Result.Result<U, Error>
}
extension Result.Result where Value : Swift.Equatable, Error : Swift.Equatable {
  public static func == (left: Result.Result<Value, Error>, right: Result.Result<Value, Error>) -> Swift.Bool
}
extension Result.Result : Swift.Equatable where Value : Swift.Equatable, Error : Swift.Equatable {
}
extension Result.Result {
  public static func ?? (left: Result.Result<Value, Error>, right: @autoclosure () -> Value) -> Value
  public static func ?? (left: Result.Result<Value, Error>, right: @autoclosure () -> Result.Result<Value, Error>) -> Result.Result<Value, Error>
}
@available(*, unavailable, renamed: "ErrorConvertible")
public protocol ErrorProtocolConvertible : Result.ErrorConvertible {
}
